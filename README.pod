=head1 NAME

Mock::MonkeyPatch - Monkey patching with test mocking in mind

=head1 SYNOPSIS

  {
    package MyApp;

    sub gen_item_id {
      my $type = shift;
      # calls external service and gets id for $type
    }

    sub build_item {
      my $type = shift;
      my $item = Item->new(type => $type);
      $item->id(gen_item_id($type));
      return $item;
    }
  }

  use Test::More;
  use MyApp;
  use Mock::MonkeyPatch;

  my $mock = Mock::MonkeyPatch->patch(
    'MyApp::gen_item_id' => sub { 'abcd' }
  );

  my $item = MyApp::build_item('rubber_chicken');
  is $item->id, 'abcd', 'building item calls MyApp::gen_random_id';
  ok $mock->called, 'the mock was indeed called';
  is_deeply $mock->arguments(0), ['rubber_chicken'], 'the mock was called with expected arguments';

=head1 COOKBOOK

=head2 Run code before the original

  my $mock = $self->patch($symbol, sub {
    $sub->(@_);
    Mock::MonkeyPatch::ORIGINAL(@_);
  });

=head1 SOURCE REPOSITORY

L<http://github.com/jberger/Mock-MonkeyPatch>

=head1 AUTHOR

Joel Berger, E<lt>joel.a.berger@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2016 by Joel Berger

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
